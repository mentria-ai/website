/**
 * Workflow Content Tests
 * 
 * This script tests the generation of content for PRs and issue comments
 * in our GitHub Actions workflows, focusing on proper escaping and
 * YAML compatibility.
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');
const assert = require('assert').strict;

// Create test directory if it doesn't exist
const testOutputDir = path.join(__dirname, 'test-output');
if (!fs.existsSync(testOutputDir)) {
  fs.mkdirSync(testOutputDir, { recursive: true });
}

console.log('Running Workflow Content Tests...');

/**
 * Test 1: Test PR content generation with template variables
 */
function testPRContentGeneration() {
  console.log('\n--- Test: PR Content Generation ---');
  
  try {
    // Mock data
    const issueNumber = 123;
    const fixRecommendation = `# Fix Recommendation
    
Here is a code sample:
\`\`\`javascript
function example() {
  return 'This is a test';
}
\`\`\`

And some more text with special chars: ${{ test }}, ${test}`;

    // Problematic template string from our workflow
    const badFixFileContent = `# Fix for Issue #${issueNumber}
              
## Automatically Generated Fix Recommendation

This fix was automatically generated by the Issue Assistant.

## Issue Link
[Issue #${issueNumber}](https://github.com/example/repo/issues/${issueNumber})

## Fix Recommendation

${fixRecommendation}

---
Generated at: ${new Date().toISOString()}
`;

    // Write to file to see what would be generated
    fs.writeFileSync(path.join(testOutputDir, 'bad_fix_content.md'), badFixFileContent);
    
    // Better approach using JS to create the content
    function createFixContent(issueNumber, fixRecommendation, issueUrl) {
      return {
        title: `Fix for Issue #${issueNumber}`,
        intro: "This fix was automatically generated by the Issue Assistant.",
        issueLink: {
          text: `Issue #${issueNumber}`,
          url: issueUrl
        },
        fixRecommendation: fixRecommendation,
        timestamp: new Date().toISOString()
      };
    }
    
    const fixContent = createFixContent(
      issueNumber, 
      fixRecommendation, 
      `https://github.com/example/repo/issues/${issueNumber}`
    );
    
    // Now generate markdown from the structured content
    const betterFixFileContent = `# ${fixContent.title}
              
## Automatically Generated Fix Recommendation

${fixContent.intro}

## Issue Link
[${fixContent.issueLink.text}](${fixContent.issueLink.url})

## Fix Recommendation

${fixContent.fixRecommendation}

---
Generated at: ${fixContent.timestamp}
`;
    
    // Write the better version to file
    fs.writeFileSync(path.join(testOutputDir, 'better_fix_content.md'), betterFixFileContent);
    
    // Test embedding in workflow YAML
    const workflowYaml = `
name: Test Workflow
on: push
jobs:
  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Generate content
        id: generate
        run: echo "content=safely generated" >> $GITHUB_OUTPUT
      
      - name: Use content
        uses: actions/github-script@v6
        with:
          script: |
            const content = \`${{ steps.generate.outputs.content }}\`;
            // Use the content safely
    `;
    
    // Try to parse the YAML
    yaml.load(workflowYaml);
    console.log('✅ YAML embedding test passed');
    
    console.log('✅ PR Content Generation test completed successfully');
    return true;
  } catch (error) {
    console.error('❌ PR Content Generation test failed:', error);
    return false;
  }
}

/**
 * Test 2: Test template string in JavaScript context
 */
function testTemplateInJavascript() {
  console.log('\n--- Test: Template Strings in JavaScript Context ---');
  
  try {
    // Mock GitHub context
    const context = {
      repo: { owner: 'testowner', repo: 'testrepo' },
      payload: {
        issue: { number: 42 }
      }
    };
    
    // Test safe function approach
    function createFixMarkdown(issueNumber, recommendation) {
      return `# Fix for Issue #${issueNumber}

## Fix Details

${recommendation}`;
    }
    
    const recommendation = "This is a test recommendation";
    const markdown = createFixMarkdown(context.payload.issue.number, recommendation);
    
    // Write to a file to test
    fs.writeFileSync(path.join(testOutputDir, 'js_template_test.md'), markdown);
    
    console.log('✅ Template in JavaScript test completed successfully');
    return true;
  } catch (error) {
    console.error('❌ Template in JavaScript test failed:', error);
    return false;
  }
}

/**
 * Test 3: Test JSON payload creation for API
 */
function testJsonPayloadCreation() {
  console.log('\n--- Test: JSON Payload Creation ---');
  
  try {
    // Test content with special characters
    const content = 'Content with "quotes" and backslashes \\ and ${variables} and ${{ expressions }}';
    
    // Bad approach - direct string interpolation
    const badPayload = `{"model":"test-model","messages":[{"role":"user","content":"${content}"}]}`;
    
    // Write to file
    fs.writeFileSync(path.join(testOutputDir, 'bad_payload.json'), badPayload);
    
    // Try to parse it - this might fail with malformed JSON
    try {
      JSON.parse(badPayload);
    } catch (e) {
      console.log('Expected failure with bad payload: ' + e.message);
    }
    
    // Better approach - construct object then stringify
    const betterPayload = JSON.stringify({
      model: "test-model",
      messages: [
        {
          role: "user",
          content: content
        }
      ]
    });
    
    // Write to file
    fs.writeFileSync(path.join(testOutputDir, 'better_payload.json'), betterPayload);
    
    // Parse it back - should work fine
    JSON.parse(betterPayload);
    
    console.log('✅ JSON Payload Creation test completed successfully');
    return true;
  } catch (error) {
    console.error('❌ JSON Payload Creation test failed:', error);
    return false;
  }
}

/**
 * Test 4: Test bash script generation for workflow
 */
function testBashScriptGeneration() {
  console.log('\n--- Test: Bash Script Generation ---');
  
  try {
    // Create a bash script with proper escaping
    const issueNumber = 123;
    const content = 'Content with special chars: "quotes", \\backslashes\\, $variables, and `backticks`';
    
    // Bad approach
    const badScript = `
echo "Creating JSON payload for issue #${issueNumber}"
echo "{\\\"model\\\":\\\"test-model\\\",\\\"messages\\\":[{\\\"role\\\":\\\"user\\\",\\\"content\\\":\\\"${content}\\\"}]}" > payload.json
`;
    
    // Write to file
    fs.writeFileSync(path.join(testOutputDir, 'bad_script.sh'), badScript);
    
    // Better approach
    const betterScript = `
echo "Creating JSON payload for issue #${issueNumber}"
# Use jq to create properly escaped JSON
jq -n \\
  --arg issue "${issueNumber}" \\
  --arg content "${content}" \\
  '{
    "model": "test-model",
    "messages": [
      {
        "role": "user", 
        "content": $content
      }
    ]
  }' > payload.json
`;
    
    // Write to file
    fs.writeFileSync(path.join(testOutputDir, 'better_script.sh'), betterScript);
    
    console.log('✅ Bash Script Generation test completed successfully');
    return true;
  } catch (error) {
    console.error('❌ Bash Script Generation test failed:', error);
    return false;
  }
}

// Run all tests
const tests = [
  testPRContentGeneration,
  testTemplateInJavascript,
  testJsonPayloadCreation, 
  testBashScriptGeneration
];

const results = tests.map(test => test());
const allPassed = results.every(result => result === true);

console.log('\n--- Test Summary ---');
console.log(`Total tests: ${tests.length}`);
console.log(`Passed: ${results.filter(r => r).length}`);
console.log(`Failed: ${results.filter(r => !r).length}`);
console.log(`Overall status: ${allPassed ? '✅ PASSED' : '❌ FAILED'}`);

// Output test artifacts location
console.log(`\nTest output files are in: ${testOutputDir}`);

// Exit with appropriate code
process.exit(allPassed ? 0 : 1); 