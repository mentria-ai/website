name: Discussion Assistant

on:
  discussion:
    types: [created]
  discussion_comment:
    types: [created, edited]

# Adding explicit permission scoping for security
permissions:
  contents: read
  discussions: write
  actions: read

jobs:
  respond-to-discussion:
    runs-on: self-hosted
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Initialize workflow
        id: init
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Load logging utilities
            const loggerPath = './.github/shared/utils/logging.js';
            if (!fs.existsSync(loggerPath)) {
              return core.setFailed('Logging utilities not found');
            }
            
            const logger = require(`${process.env.GITHUB_WORKSPACE}/${loggerPath}`);
            const logFile = logger.initLogFile('Discussion Assistant', context);
            
            // Start logging
            logger.logSection(logFile, "Workflow Initialization");
            logger.logMessage(logFile, "- Event: " + context.eventName);
            logger.logMessage(logFile, "- Action: " + context.payload.action);
            logger.logMessage(logFile, "- Actor: " + context.actor);
            
            // Make log file available to all steps
            core.setOutput('log_file', logFile);
            
            // Basic validation
            if (context.eventName !== 'discussion' && context.eventName !== 'discussion_comment') {
              logger.logError(logFile, `Unsupported event type: ${context.eventName}`);
              return core.setFailed(`Unsupported event type: ${context.eventName}`);
            }
            
            // Validate event payload
            if (context.eventName === 'discussion' && !context.payload.discussion) {
              logger.logError(logFile, 'Missing discussion data in event payload');
              return core.setFailed('Missing discussion data in event payload');
            }
            
            if (context.eventName === 'discussion_comment') {
              if (!context.payload.discussion) {
                logger.logError(logFile, 'Missing discussion data in comment event payload');
                return core.setFailed('Missing discussion data in comment event payload');
              }
              
              if (!context.payload.comment) {
                logger.logError(logFile, 'Missing comment data in event payload');
                return core.setFailed('Missing comment data in event payload');
              }
            }
            
            logger.logSuccess(logFile, 'Input validation passed');
            return { log_file: logFile };
      
      - name: Extract discussion content
        id: get-content
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const logFile = '${{ steps.init.outputs.log_file }}';
            
            // Load utilities
            const loggerPath = './.github/shared/utils/logging.js';
            const eventExtractorPath = './.github/shared/event-handlers/event-extractor.js';
            
            if (!fs.existsSync(loggerPath) || !fs.existsSync(eventExtractorPath)) {
              return core.setFailed('Required modules not found');
            }
            
            const logger = require(`${process.env.GITHUB_WORKSPACE}/${loggerPath}`);
            const eventExtractor = require(`${process.env.GITHUB_WORKSPACE}/${eventExtractorPath}`);
            
            logger.logSection(logFile, "Content Extraction");
            
            try {
              // Extract content from discussion or comment
              const contentResult = eventExtractor.extractDiscussionContent(context.payload, logFile, logger);
              
              if (!contentResult.success) {
                logger.logError(logFile, `Failed to extract content: ${contentResult.error}`);
                return core.setFailed(`Failed to extract content: ${contentResult.error}`);
              }
              
              // Get previous comments for context
              let previousComments = [];
              
              if (context.eventName === 'discussion_comment') {
                try {
                  logger.logMessage(logFile, "Fetching previous comments for context");
                  
                  // Define GraphQL query for fetching comments
                  const commentsQuery = `
                    query($owner: String!, $repo: String!, $discussionNumber: Int!) {
                      repository(owner: $owner, name: $repo) {
                        discussion(number: $discussionNumber) {
                          comments(first: 10) {
                            nodes {
                              author {
                                login
                              }
                              body
                              createdAt
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const variables = {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    discussionNumber: context.payload.discussion.number
                  };
                  
                  const result = await github.graphql(commentsQuery, variables);
                  const comments = result.repository.discussion.comments.nodes;
                  
                  // Format comments for context
                  previousComments = comments.map(comment => ({
                    author: comment.author.login,
                    body: comment.body,
                    createdAt: comment.createdAt
                  }));
                  
                  logger.logSuccess(logFile, `Retrieved ${previousComments.length} previous comments`);
                } catch (error) {
                  logger.logWarning(logFile, `Error retrieving previous comments: ${error.message}`);
                  // Continue without previous comments - non-critical error
                }
              }
              
              // Create a JSON file with all extracted content for the next step
              const extractedData = {
                ...contentResult,
                previousComments
              };
              
              fs.writeFileSync('content_data.json', JSON.stringify(extractedData, null, 2));
              
              logger.logSuccess(logFile, "Content extraction completed successfully");
              
              return {
                discussion_id: contentResult.discussionId,
                comment_id: contentResult.commentId,
                content_file: contentResult.contentFile,
                base64_file: contentResult.base64File
              };
            } catch (error) {
              logger.logError(logFile, `Error in content extraction: ${error.message}`);
              return core.setFailed(`Error in content extraction: ${error.message}`);
            }
      
      - name: Generate AI response
        id: generate-response
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const logFile = '${{ steps.init.outputs.log_file }}';
            
            // Load utilities
            const loggerPath = './.github/shared/utils/logging.js';
            const apiPath = './.github/shared/api/together-ai.js';
            const promptBuilderPath = './.github/shared/utils/prompt-builder.js';
            
            if (!fs.existsSync(loggerPath) || !fs.existsSync(apiPath) || !fs.existsSync(promptBuilderPath)) {
              return core.setFailed('Required modules not found');
            }
            
            const logger = require(`${process.env.GITHUB_WORKSPACE}/${loggerPath}`);
            const api = require(`${process.env.GITHUB_WORKSPACE}/${apiPath}`);
            const promptBuilder = require(`${process.env.GITHUB_WORKSPACE}/${promptBuilderPath}`);
            
            logger.logSection(logFile, "AI Response Generation");
            
            try {
              // Verify API key before making requests
              const apiKey = process.env.TOGETHER_API_KEY;
              if (!apiKey) {
                logger.logError(logFile, "Missing Together API key");
                return core.setFailed("Missing Together API key");
              }
              
              // Load extracted content data
              const contentDataPath = 'content_data.json';
              if (!fs.existsSync(contentDataPath)) {
                logger.logError(logFile, "Content data file not found");
                return core.setFailed("Content data file not found");
              }
              
              const contentData = JSON.parse(fs.readFileSync(contentDataPath, 'utf8'));
              logger.logMessage(logFile, `Loaded content data: discussion_id=${contentData.discussionId}, event_type=${contentData.eventType}`);
              
              // Build prompt using the prompt builder
              const messages = promptBuilder.buildDiscussionPrompt({
                content: contentData.content,
                eventType: contentData.eventType,
                previousComments: contentData.previousComments || []
              });
              
              logger.logMessage(logFile, "Built prompt for AI response");
              
              // Call Together AI API
              const apiResponse = await api.callTogetherAI({
                model: "deepseek-ai/DeepSeek-R1",
                messages: messages,
                apiKey: apiKey,
                logFile: logFile,
                logger: logger
              });
              
              if (!apiResponse.success) {
                logger.logError(logFile, `API request failed: ${apiResponse.error}`);
                return core.setFailed(`API request failed: ${apiResponse.error}`);
              }
              
              logger.logSuccess(logFile, "Generated AI response successfully");
              
              // Write content to a file for the next step
              fs.writeFileSync('response.txt', apiResponse.content);
              
              return {
                response_file: 'response.txt',
                content_length: apiResponse.content.length
              };
            } catch (error) {
              logger.logError(logFile, `Error generating AI response: ${error.message}`);
              return core.setFailed(`Error generating AI response: ${error.message}`);
            }
      
      - name: Post response to discussion
        id: post-response
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const logFile = '${{ steps.init.outputs.log_file }}';
            
            // Load utilities
            const loggerPath = './.github/shared/utils/logging.js';
            const responseHandlerPath = './.github/shared/response-handlers/github-response.js';
            
            if (!fs.existsSync(loggerPath) || !fs.existsSync(responseHandlerPath)) {
              return core.setFailed('Required modules not found');
            }
            
            const logger = require(`${process.env.GITHUB_WORKSPACE}/${loggerPath}`);
            const responseHandler = require(`${process.env.GITHUB_WORKSPACE}/${responseHandlerPath}`);
            
            logger.logSection(logFile, "Posting Response");
            
            try {
              // Get response content
              const responseFile = 'response.txt';
              if (!fs.existsSync(responseFile)) {
                logger.logError(logFile, "Response file not found");
                return core.setFailed("Response file not found");
              }
              
              const responseContent = fs.readFileSync(responseFile, 'utf8');
              logger.logMessage(logFile, `Loaded response content (${responseContent.length} bytes)`);
              
              // Load discussion ID and comment ID
              const discussionId = '${{ steps.get-content.outputs.discussion_id }}';
              const commentId = '${{ steps.get-content.outputs.comment_id }}' || null;
              
              if (!discussionId) {
                logger.logError(logFile, "Missing discussion ID");
                return core.setFailed("Missing discussion ID");
              }
              
              // Post to discussion
              const postResult = await responseHandler.postToDiscussion({
                github,
                discussionId,
                commentId,
                responseContent,
                logFile,
                logger,
                context
              });
              
              if (!postResult.success) {
                logger.logError(logFile, `Failed to post response: ${postResult.error}`);
                return core.setFailed(`Failed to post response: ${postResult.error}`);
              }
              
              logger.logSuccess(logFile, `Successfully posted response with ID: ${postResult.commentId}`);
              
              return {
                comment_id: postResult.commentId,
                success: true
              };
            } catch (error) {
              logger.logError(logFile, `Error posting response: ${error.message}`);
              return core.setFailed(`Error posting response: ${error.message}`);
            }
      
      - name: Finalize workflow
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const logFile = '${{ steps.init.outputs.log_file }}';
              if (!logFile || !fs.existsSync(logFile)) {
                console.log('Log file not found or not specified');
                return;
              }
              
              const loggerPath = './.github/shared/utils/logging.js';
              if (!fs.existsSync(loggerPath)) {
                console.log('Logger module not found');
                return;
              }
              
              const logger = require(`${process.env.GITHUB_WORKSPACE}/${loggerPath}`);
              
              // Create summary of outcomes
              const outcomes = {
                result: '${{ steps.post-response.outcome }}' === 'success' ? 'success' : 'failure',
                eventType: context.eventName,
                action: context.payload.action || 'N/A'
              };
              
              logger.finalizeLog(logFile, context, outcomes);
              console.log(`Workflow log finalized at ${logFile}`);
            } catch (error) {
              console.error(`Error finalizing workflow: ${error.message}`);
            } 